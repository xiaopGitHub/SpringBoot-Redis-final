package com.oneconnect.sg.annotations;

import com.oneconnect.sg.common.ErrorCodeConstant;
import com.oneconnect.sg.common.exception.InvalidInputException;
import org.springframework.util.ObjectUtils;

import javax.validation.Constraint;
import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;
import javax.validation.Payload;
import java.lang.annotation.*;

@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.ANNOTATION_TYPE, ElementType.FIELD, ElementType.PARAMETER})
@Documented
@Constraint(validatedBy = ValidLength.ValidLengthValidator.class)
public @interface ValidLength {

    ErrorCodeConstant errorCode() default ErrorCodeConstant.SYSTEM_ERROR;

    String message() default "invalid input length";

    int max();

    int min();

    Class<?>[] groups() default {};

    Class<? extends Payload>[] payload() default {};

    class ValidLengthValidator implements ConstraintValidator<ValidLength, Object> {
        private ErrorCodeConstant errorCode;
        private int max;
        private int min;

        @Override
        public void initialize(ValidLength constraintAnnotation) {
            this.errorCode = constraintAnnotation.errorCode();
            this.min = constraintAnnotation.min();
            this.max = constraintAnnotation.max();
        }

        @Override
        public boolean isValid(Object obj, ConstraintValidatorContext constraintValidatorContext) {
            if(!ObjectUtils.isEmpty(obj)){
                if(obj.toString().length() >= this.min && obj.toString().length() <= this.max){
                    return true;
                }
            }else{
                return true;
            }
            throw new InvalidInputException(errorCode);
        }
    }
}
